import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

class Product {
    int id;
    String name;
    double price;
    String category;

    public Product(int id, String name, double price, String category) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " - $" + price;
    }
}

class Cart {
    private final Map<Product, Integer> items = new HashMap<>();

    public void addProduct(Product product) {
        items.put(product, items.getOrDefault(product, 0) + 1);
    }

    public void removeProduct(Product product) {
        if (items.containsKey(product)) {
            int qty = items.get(product);
            if (qty > 1) {
                items.put(product, qty - 1);
            } else {
                items.remove(product);
            }
        }
    }

    public String viewCart() {
        if (items.isEmpty()) {
            return "Your cart is empty.";
        }
        StringBuilder cartDetails = new StringBuilder("<html><b>Your Cart:</b><br>");
        double total = 0;
        for (Map.Entry<Product, Integer> entry : items.entrySet()) {
            Product p = entry.getKey();
            int qty = entry.getValue();
            cartDetails.append(p.name).append(" x").append(qty).append(" - $").append(p.price * qty).append("<br>");
            total += p.price * qty;
        }
        cartDetails.append("<b>Total: $").append(total).append("</b></html>");
        return cartDetails.toString();
    }

    public void purchase() {
        items.clear();
    }

    public boolean isEmpty() {
        return items.isEmpty();
    }
}

public class Main extends JFrame {
    private final DefaultListModel<Product> productListModel = new DefaultListModel<>();
    private final JList<Product> productList = new JList<>(productListModel);
    private final DefaultListModel<Product> cartListModel = new DefaultListModel<>();
    private final JList<Product> cartList = new JList<>(cartListModel);
    private final Cart cart = new Cart();
    private final JLabel cartLabel = new JLabel("Your cart is empty.", SwingConstants.CENTER);

    private final List<Product> allProducts = Arrays.asList(
            new Product(1, "Dell Laptop", 800.00, "Laptop"),
            new Product(2, "HP Laptop", 750.00, "Laptop"),
            new Product(3, "MacBook", 1200.00, "Laptop"),
            new Product(4, "Samsung Phone", 500.00, "Mobile"),
            new Product(5, "iPhone", 999.00, "Mobile"),
            new Product(6, "OnePlus Phone", 650.00, "Mobile"),
            new Product(7, "Sony Headphones", 100.00, "Headphones"),
            new Product(8, "Bose Headphones", 200.00, "Headphones"),
            new Product(9, "JBL Headphones", 80.00, "Headphones")
    );

    public Main() {
        setTitle("E-Commerce Store");
        setSize(600, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // *Category Buttons*
        JPanel categoryPanel = new JPanel();
        categoryPanel.setLayout(new GridLayout(1, 3, 10, 10)); // Better button spacing
        JButton laptopButton = new JButton("Laptops");
        JButton mobileButton = new JButton("Mobiles");
        JButton headphoneButton = new JButton("Headphones");

        laptopButton.addActionListener(e -> loadCategory("Laptop"));
        mobileButton.addActionListener(e -> loadCategory("Mobile"));
        headphoneButton.addActionListener(e -> loadCategory("Headphones"));

        categoryPanel.add(laptopButton);
        categoryPanel.add(mobileButton);
        categoryPanel.add(headphoneButton);

        // *Product List Panel*
        JPanel productPanel = new JPanel(new BorderLayout());
        productPanel.setBorder(BorderFactory.createTitledBorder("Available Products"));
        productPanel.add(new JScrollPane(productList), BorderLayout.CENTER);

        // *Cart Panel*
        JPanel cartPanel = new JPanel(new BorderLayout());
        cartPanel.setBorder(BorderFactory.createTitledBorder("Shopping Cart"));
        cartPanel.add(new JScrollPane(cartList), BorderLayout.CENTER);
        cartPanel.add(cartLabel, BorderLayout.SOUTH);

        // *Buttons*
        JButton addToCartButton = new JButton("Add to Cart");
        JButton removeFromCartButton = new JButton("Remove from Cart");
        JButton purchaseButton = new JButton("Purchase");

        addToCartButton.addActionListener(e -> {
            Product selected = productList.getSelectedValue();
            if (selected != null) {
                cart.addProduct(selected);
                cartListModel.addElement(selected);
                cartLabel.setText(cart.viewCart());
            } else {
                JOptionPane.showMessageDialog(null, "Select a product first!");
            }
        });

        removeFromCartButton.addActionListener(e -> {
            Product selected = cartList.getSelectedValue();
            if (selected != null) {
                cart.removeProduct(selected);
                cartListModel.removeElement(selected);
                cartLabel.setText(cart.viewCart());
            } else {
                JOptionPane.showMessageDialog(null, "Select an item to remove!");
            }
        });

        purchaseButton.addActionListener(e -> {
            if (cart.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Your cart is empty!");
            } else {
                cart.purchase();
                cartListModel.clear();
                cartLabel.setText("Your cart is empty.");
                JOptionPane.showMessageDialog(null, "Purchased Successfully! Thank you for shopping.");
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(1, 3, 10, 10));
        buttonPanel.add(addToCartButton);
        buttonPanel.add(removeFromCartButton);
        buttonPanel.add(purchaseButton);

        // *Styling*
        productList.setFont(new Font("Arial", Font.PLAIN, 14));
        cartList.setFont(new Font("Arial", Font.PLAIN, 14));
        cartLabel.setFont(new Font("Arial", Font.BOLD, 14));
        laptopButton.setFont(new Font("Arial", Font.BOLD, 14));
        mobileButton.setFont(new Font("Arial", Font.BOLD, 14));
        headphoneButton.setFont(new Font("Arial", Font.BOLD, 14));
        addToCartButton.setFont(new Font("Arial", Font.BOLD, 14));
        removeFromCartButton.setFont(new Font("Arial", Font.BOLD, 14));
        purchaseButton.setFont(new Font("Arial", Font.BOLD, 14));

        // *Adding components to frame*
        add(categoryPanel, BorderLayout.NORTH);
        add(productPanel, BorderLayout.WEST);
        add(cartPanel, BorderLayout.EAST);
        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void loadCategory(String category) {
        productListModel.clear();
        for (Product p : allProducts) {
            if (p.category.equals(category)) {
                productListModel.addElement(p);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Main gui = new Main();
            gui.setVisible(true);
        });
    }
}